// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings to RNNoise C library
class RNNoise {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RNNoise(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  RNNoise.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<DenoiseState> rnnoise_create(
    ffi.Pointer<ffi.Void> model,
  ) {
    return _rnnoise_create(
      model,
    );
  }

  late final _rnnoise_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<DenoiseState> Function(
              ffi.Pointer<ffi.Void>)>>('rnnoise_create');
  late final _rnnoise_create = _rnnoise_createPtr
      .asFunction<ffi.Pointer<DenoiseState> Function(ffi.Pointer<ffi.Void>)>();

  void rnnoise_destroy(
    ffi.Pointer<DenoiseState> st,
  ) {
    return _rnnoise_destroy(
      st,
    );
  }

  late final _rnnoise_destroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<DenoiseState>)>>(
          'rnnoise_destroy');
  late final _rnnoise_destroy = _rnnoise_destroyPtr
      .asFunction<void Function(ffi.Pointer<DenoiseState>)>();

  double rnnoise_process_frame(
    ffi.Pointer<DenoiseState> st,
    ffi.Pointer<ffi.Float> out,
    ffi.Pointer<ffi.Float> in1,
  ) {
    return _rnnoise_process_frame(
      st,
      out,
      in1,
    );
  }

  late final _rnnoise_process_framePtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<DenoiseState>, ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Float>)>>('rnnoise_process_frame');
  late final _rnnoise_process_frame = _rnnoise_process_framePtr.asFunction<
      double Function(ffi.Pointer<DenoiseState>, ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Float>)>();

  int rnnoise_get_frame_size() {
    return _rnnoise_get_frame_size();
  }

  late final _rnnoise_get_frame_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('rnnoise_get_frame_size');
  late final _rnnoise_get_frame_size =
      _rnnoise_get_frame_sizePtr.asFunction<int Function()>();

  int rnnoise_get_sample_rate() {
    return _rnnoise_get_sample_rate();
  }

  late final _rnnoise_get_sample_ratePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          'rnnoise_get_sample_rate');
  late final _rnnoise_get_sample_rate =
      _rnnoise_get_sample_ratePtr.asFunction<int Function()>();
}

final class DenoiseState extends ffi.Opaque {}
